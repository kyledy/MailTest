"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
exports.OutlookConfigurationSettings = void 0;
const OutlookProtocol_1 = require("./OutlookProtocol");
const OutlookUser_1 = require("./OutlookUser");
const UserSettingName_1 = require("../../../Enumerations/UserSettingName");
const LazyMember_1 = require("../../../Core/LazyMember");
const ExtensionMethods_1 = require("../../../ExtensionMethods");
const ConfigurationSettingsBase_1 = require("../ConfigurationSettingsBase");
/** @internal  */
class OutlookConfigurationSettings extends ConfigurationSettingsBase_1.ConfigurationSettingsBase {
    ConvertSettings(smtpAddress, requestedSettings) { throw new Error("OutlookConfigurationSettings.ts - ConvertSettings : Not implemented."); }
    GetNamespace() { throw new Error("OutlookConfigurationSettings.ts - GetNamespace : Not implemented."); }
    IsAvailableUserSetting(setting) { throw new Error("OutlookConfigurationSettings.ts - IsAvailableUserSetting : Not implemented."); }
    MakeRedirectionResponse(redirectUrl) { throw new Error("OutlookConfigurationSettings.ts - MakeRedirectionResponse : Not implemented."); }
    ReportUnsupportedSettings(requestedSettings, response) { throw new Error("OutlookConfigurationSettings.ts - ReportUnsupportedSettings : Not implemented."); }
}
exports.OutlookConfigurationSettings = OutlookConfigurationSettings;
OutlookConfigurationSettings.allOutlookProviderSettings = new LazyMember_1.LazyMember(() => {
    var results = []; //new List<UserSettingName>();
    ExtensionMethods_1.ArrayHelper.AddRange(results, OutlookUser_1.OutlookUser.AvailableUserSettings);
    ExtensionMethods_1.ArrayHelper.AddRange(results, OutlookProtocol_1.OutlookProtocol.AvailableUserSettings);
    results.push(UserSettingName_1.UserSettingName.AlternateMailboxes);
    return results;
});
//# sourceMappingURL=OutlookConfigurationSettings.js.map